package com.sk.rk.services.service;

import com.sk.rk.services.utils.CSVUtils;
import com.sk.rk.services.utils.Constants;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@Slf4j
public class DatabaseService {




    private String createTableQueryString(String tableName, List<Map<String, String>> fieldList) {

        String createStmt = "CREATE TABLE %s (%s_id INTEGER generated by default as identity,";

        StringBuilder queryBuilder = new StringBuilder();

        for (Map<String, String> map: fieldList) {
            queryBuilder.append(Constants.COMA).append(map.get(CSVUtils.COLUMN_NAME)).append(" ").append(map.get(CSVUtils.DATA_TYPE));
        }

        queryBuilder.deleteCharAt(0);
        queryBuilder.append(")");

        queryBuilder.insert(0, String.format(createStmt, tableName, tableName));

        return queryBuilder.toString();
    }


/*
    List<Map<String, Object>> getTableViewData(String tableName, String ycolumn, String[] xcolumns) {
        StringBuilder selectQuery = new StringBuilder("select ");
        selectQuery.append(" ").append(ycolumn);
        Arrays.stream(xcolumns).forEach(str->{
            selectQuery.append(", ").append(str);
        });

        selectQuery.append(" from ").append(tableName);

        NativeQueryImpl nativeQuery = (NativeQueryImpl) entityManager.createNativeQuery(selectQuery.toString());
        nativeQuery.setResultListTransformer(AliasToEntityMapResultTransformer.INSTANCE);
        nativeQuery.setTupleTransformer((tuples, alias)->{
           Map<String, Object> resultMap = new HashMap<>();
           resultMap.put(ycolumn, tuples[0]);
           for(int i=0; i<xcolumns.length; i++) {
               resultMap.put(xcolumns[i], tuples[(i+1)]);
           }
           return resultMap;
        });
        return nativeQuery.getResultList();
    }
*/


}
